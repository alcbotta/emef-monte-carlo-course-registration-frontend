{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","submit","a","axios","post","method","body","JSON","stringify","title","userId","headers","result","console","log","error","useEffect","className","Form","name","id","noValidate","FormGroup","Label","Input","required","type","placeholder","Button","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4XA0GeA,MAnGf,WAEE,IAAMC,EAAM,uCAAG,4BAAAC,EAAA,+EAEUC,IAAMC,KAAK,6CAA8C,CAC5EC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAO,MACPH,KAAM,MACNI,OAAQ,IAEVC,QAAS,CACP,eAAgB,qCAVT,OAELC,EAFK,OAaXC,QAAQC,IAAIF,GAbD,gDAeXC,QAAQE,MAAR,MAfW,yDAAH,qDAmBZC,qBAAU,WAERf,OAIF,IAAIK,EAAO,KAiEX,OA7DEA,EACE,qCACE,oBAAIW,UAAU,OAAd,iHAIA,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,eAAf,SACE,eAACC,EAAA,EAAD,CAIEC,KAAK,cACLC,GAAG,cACHC,YAAY,EANd,UAQE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,mBACA,cAACC,EAAA,EAAD,CACEC,UAAU,EACVC,KAAK,OACLP,KAAK,eACLC,GAAG,eACHO,YAAa,gBAGjB,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAQ,UACR,cAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,KAAK,QACLP,KAAK,gBACLC,GAAG,gBACHO,YAAa,iBAGjB,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAQ,2CACR,cAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,KAAK,WACLP,KAAK,4BACLC,GAAG,4BACHO,YAAa,8BAGjB,cAACC,EAAA,EAAD,CACEC,MAAM,UACNZ,UAAU,cAEVa,QAAS7B,EAJX,8BAgBV,qBAAKgB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAAgCX,OCzFvByB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.216784c2.chunk.js","sourcesContent":["import \"./App.scss\";\nimport { Form, FormGroup, Input, Label, Button } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import { useForm } from \"@formspree/react\";\nimport axios from \"axios\";\nimport React, { useEffect } from 'react';\n\nfunction App() {\n\n  const submit = async () => {\n    try{\n      const result = await axios.post('https://jsonplaceholder.typicode.com/posts', {\n        method: 'POST',\n        body: JSON.stringify({\n          title: 'foo',\n          body: 'bar',\n          userId: 1,\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      });\n      console.log(result);\n    }catch (e){\n      console.error(e)\n    }\n  }\n\n  useEffect(() => {\n    \n    submit();\n  });\n\n  // const [state, ] = useForm(\"xleawdjb\");\n  let body = null;\n  if (false) {\n    body = <p>Formulário submetido!</p>;\n  } else {\n    body = (\n      <>\n        <h3 className=\"pb-3\">\n          Por favor, preencha o formulário abaixo para demonstrar o seu\n          interesse em aprender a programar.\n        </h3>\n        <div className=\"blurred-box\">\n          <div className=\"student-form\">\n            <Form\n              // onSubmit={handleSubmit}\n              // action=\"https://formspree.io/andre.emef.montecarlo.2021@gmail.com\"\n              // method=\"POST\"\n              name=\"sentMessage\"\n              id=\"contactForm\"\n              noValidate={false}\n            >\n              <FormGroup>\n                <Label>Nome</Label>\n                <Input\n                  required={true}\n                  type=\"text\"\n                  name=\"contact-name\"\n                  id=\"contact-name\"\n                  placeholder={\"Seu nome\"}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label>{\"Email\"}</Label>\n                <Input\n                  required\n                  type=\"email\"\n                  name=\"contact-email\"\n                  id=\"contact-email\"\n                  placeholder={\"Seu email\"}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label>{\"Você tem acesso à um computador?\"}</Label>\n                <Input\n                  required\n                  type=\"textarea\"\n                  name=\"contact-personal-computer\"\n                  id=\"contact-personal-computer\"\n                  placeholder={\"Sim/Não ou explique\"}\n                />\n              </FormGroup>\n              <Button\n                color=\"primary\"\n                className=\"send-button\"\n                // disabled={state.submitting}\n                onClick={submit}\n              >\n                Enviar\n              </Button>\n            </Form>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">{body}</header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}